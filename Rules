#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

# I want to work with compass (see https://github.com/chriseppstein/compass/wiki/nanoc-Integration)
require 'compass'
Compass.add_project_configuration 'compass/config.rb' # when using Compass 0.10

preprocess do
  @site.memory = {}

  fetch_galleries

  # canonicalize_years
  collect_gallery_tags
  create_gallery_tag_items
  # collect_chrono
  # create_tag_items
  # create_chrono_items  
  # somehow I need to delete the output of the stuff I create later?
  # %x(rm 'output/detail/photography/index.html')
  # create_item('/detail/photography/', :title => "Photography", :'base-color' => "#94b394", :layout => "detail")
  # create_item('/detail/photography/', :title => "Photography", :'base-color' => "#94b394", :layout => "detail_photography")
end

# compile '/photography/galleries/*/' do
#   # don’t standard css
# end

# compile %r{^/photography/galleries/.*/_meta} do
#   # don’t compile galler metas
# end

compile %r{^/assets/javascript/.*} do
  # don’t standard css
end

compile %r{^/assets/styles/css/.*} do
  # don’t standard css
end

compile %r{^/assets/styles/sass/.*} do
  filter :sass, Compass.sass_engine_options
end


compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    case item[:extension]
      when 'txt'
        filter :redcloth
      when 'md'
        filter :kramdown
      when 'html.haml'
        filter :haml
    end
    if @item[:layout]
      layout(@item[:layout])
    elsif @item.identifier =~ /\/detail\//
      layout 'detail'
    # elsif @item[:kind] == 'article'
    #   layout 'article'
    else
      layout 'default'
    end
  end
end

route %r{^/assets/javascript/.*} do
  if item[:extension]
    item.identifier.chop + '.' + item[:extension]
  else
    item.identifier.chop
  end
end

route %r{^/assets/styles/sass/_} do
  # don't output partials, so return nil
  nil
end

route %r{^.*/README.*} do
  # don't output READMES, so return nil
  nil
end

route %r{^/photography/galleries/.*/_meta} do
  item.identifier.gsub(/_meta\//, '') + 'index.html'
end

route %r{^/assets/styles/(sass|css)/} do
  item.identifier.gsub(/\/(sass|css)\//, '/').chop + '.css'
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :haml, :format => :html5
